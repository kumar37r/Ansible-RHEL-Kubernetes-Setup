---

  # - name: confirmation
  #   prompt: "Type 'YES' to establish passwordless login to the remote hosts:"
  #   default: 'NO'
  #   private: no
  #   when: confirmation != "YES"

  # - name: "Check Confirmation"
  #   fail: msg="Exiting... You must type 'YES' to continue."
  #   when: confirmation != "YES"


  - name: check .ssh local directory exists
    stat:
      path: "~/.ssh"
    register: ssh_directory_exists_check

  - name: Check needed OS tools exist
    shell: which sshpass ssh-keygen ssh-copy-id
    register: os_tools_exist
    ignore_errors: true

  - name: Fail execution if any of the needed OS tools is missing
    fail:
      msg: "One or more of the: sshpass, ssh-keygen, ssh-copy-id are missing on this machine. Please install them - using your distribution's recommended method - before continuing."
    when: os_tools_exist.rc != 0

  - name: create ~/.ssh local directory
    file:
      path: "~/.ssh"
      state: directory
      mode: "0700"
    register: ssh_directory_creation
    when: ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

  - name: check .ssh key file exists
    stat:
      path: "~/.ssh/{{item}}"
    register: ssh_key_file_exists_check
    with_items:
      - "{{ssh_key_filename}}"
      - "{{ssh_key_filename}}.pub"

  - name: generate ssh key on local machine
    shell: "ssh-keygen -t rsa -f ~/.ssh/{{ssh_key_filename}} -P \"\""
    register: ssh_key_creation
    failed_when: ssh_key_creation.rc != 0
    when: ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false


  - name: check .ssh/config file exists
    stat:
      path: "~/.ssh/config"
    register: ssh_config_file_exists_check

  - name: create the ~/.ssh/config file
    file:
      path: "~/.ssh/config"
      state: touch
      mode: "0644"
    register: ssh_config_file_creation
    when: ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

  - name: add the new ssh key to the ~/.ssh/config file
    lineinfile:
      path: "~/.ssh/config"
      line: "IdentityFile ~/.ssh/{{ssh_key_filename}}"
      state: present
      backup: yes
    register: ssh_config_file_key_addition

  - name: distribute the ssh key to the remote hosts
    shell: "sshpass -p \"{{remote_machine_password}}\" ssh-copy-id -o StrictHostKeyChecking=no -i ~/.ssh/{{ssh_key_filename}}.pub -p 22 \"{{remote_machine_username}}@{{ item }}\""
    register: ssh_copy_id_execution
    with_items: 
      - "{{ groups['all_nodes']}}"
    failed_when: ssh_copy_id_execution.rc != 0

  - name: check ssh to remote hosts works
    shell: "ssh {{ item }}; id"
    register: ssh_connection_test
    failed_when: ssh_connection_test.rc != 0
    with_items:
      - "{{ groups['all_nodes'] }}" 

  - name: print the connectivity test results
    debug:
      var: ssh_connection_test.stdout_lines




