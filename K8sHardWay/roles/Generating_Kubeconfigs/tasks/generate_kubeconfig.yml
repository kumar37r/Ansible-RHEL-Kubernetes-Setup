---
# This task file is to generate Kubeconfig files for kubernetes

  - name: Create kubeconfig directory
    file:
      path: '{{ CONF_DIR }}'
      state: directory

# Generating a kubelet kubeconfig for each worker node
  - name: Configure kubeconf files for Kubelet for each woker node
    shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ CERT_DIR }}/ca.pem \
        --embed-certs=true \
        --server=https://{{ groups['k8s_loadbalancer_ip'][0] }}:6443 \
        --kubeconfig={{ CONF_DIR }}/{{ item }}.kubeconfig
    
      kubectl config set-credentials system:node:{{ item }} \
        --client-certificate={{ CERT_DIR }}/{{ item }}.pem \
        --client-key={{ CERT_DIR }}/{{ item }}-key.pem \
        --embed-certs=true \
        --kubeconfig={{ CONF_DIR }}/{{ item }}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:node:{{ item }} \
        --kubeconfig={{ CONF_DIR }}/{{ item }}.kubeconfig 

      kubectl config use-context default --kubeconfig={{ CONF_DIR }}/{{ item }}.kubeconfig
    # args:
    #   creates: '{{ CONF_DIR }}/{{ item }}.kubeconfig'
    loop:
      - "{{ groups['k8s_worker'][0] }}"
      - "{{ groups['k8s_worker'][1] }}"

#Generating a kube-proxy kubeconfig
  - name: Configure Kube-proxy config
    shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ CERT_DIR }}/ca.pem \
        --embed-certs=true \
        --server=https://{{ groups['k8s_loadbalancer_ip'] [0]}}:6443 \
        --kubeconfig={{ CONF_DIR }}/kube-proxy.kubeconfig

      kubectl config set-credentials system:kube-proxy \
        --client-certificate={{ CERT_DIR }}/kube-proxy.pem \
        --client-key={{ CERT_DIR }}/kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig={{ CONF_DIR }}/kube-proxy.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-proxy \
        --kubeconfig={{ CONF_DIR }}/kube-proxy.kubeconfig

      kubectl config use-context default --kubeconfig={{ CONF_DIR }}/kube-proxy.kubeconfig

# Generating a kube-controller-manager kubeconfig
  - name: Generate kubeconf files for kube-controller-manager
    shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ CERT_DIR }}/ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig={{ CONF_DIR }}/kube-controller-manager.kubeconfig

      kubectl config set-credentials system:kube-controller-manager \
        --client-certificate={{ CERT_DIR }}/kube-controller-manager.pem \
        --client-key={{ CERT_DIR }}/kube-controller-manager-key.pem \
        --embed-certs=true \
        --kubeconfig={{ CONF_DIR }}/kube-controller-manager.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:kube-controller-manager \
        --kubeconfig={{ CONF_DIR }}/kube-controller-manager.kubeconfig

      kubectl config use-context default --kubeconfig={{ CONF_DIR }}/kube-controller-manager.kubeconfig

# Generating a kube-scheduler kubeconfig
  - name: Generate kubeconf files for kube-scheduler
    shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
      --certificate-authority={{ CERT_DIR }}/ca.pem \
      --embed-certs=true \
      --server=https://127.0.0.1:6443 \
      --kubeconfig={{ CONF_DIR }}/kube-scheduler.kubeconfig

      kubectl config set-credentials system:kube-scheduler \
      --client-certificate={{ CERT_DIR }}/kube-scheduler.pem \
      --client-key={{ CERT_DIR }}/kube-scheduler-key.pem \
      --embed-certs=true \
      --kubeconfig={{ CONF_DIR }}/kube-scheduler.kubeconfig

      kubectl config set-context default \
      --cluster=kubernetes-the-hard-way \
      --user=system:kube-scheduler \
      --kubeconfig={{ CONF_DIR }}/kube-scheduler.kubeconfig

      kubectl config use-context default --kubeconfig={{ CONF_DIR }}/kube-scheduler.kubeconfig

# Generating an admin kubeconfig
  - name: Generate kubeconfig file for Admin
    shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ CERT_DIR }}/ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig={{  CONF_DIR  }}/admin.kubeconfig

      kubectl config set-credentials admin \
        --client-certificate={{ CERT_DIR }}/admin.pem \
        --client-key={{ CERT_DIR }}/admin-key.pem \
        --embed-certs=true \
        --kubeconfig={{ CONF_DIR }}/admin.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=admin \
        --kubeconfig={{ CONF_DIR }}/admin.kubeconfig

      kubectl config use-context default --kubeconfig={{  CONF_DIR }}/admin.kubeconfig
